
"""
Node Factory Map Generator

This script generates a C++ header file containing a mapping from ImGui function names
to their corresponding node class names for the NodeCreatorFactory system.

The generated map is used to dynamically create nodes based on function names during
runtime compilation and node instantiation.
"""

import os
import json
import re


BLOCKS_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '../src/core/components/blocks'))
JSON_PATH = os.path.join(os.path.dirname(__file__), 'output', 'imgui_functions.json')
MAPS_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '../src/generated/maps'))
SRC_MAPS_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '../src/core/types/maps'))
default_output = os.path.join(MAPS_DIR, 'NodeFactoryMap.hpp')
default_stub_output = os.path.join(SRC_MAPS_DIR, 'NodeFactoryMap.hpp')


def camel_to_snake(name):
    """
    Convert a CamelCase string to snake_case.

    This function handles the conversion by inserting underscores before uppercase
    letters and converting everything to lowercase.

    Args:
        name (str): The CamelCase string to convert.

    Returns:
        str: The converted snake_case string.
    """
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()


def main(output_path=default_output, stub_output_path=default_stub_output):
    """
    Generate the node factory map header file.

    This function loads ImGui function definitions from a JSON file, checks for
    corresponding node header files in the blocks directory, and generates a C++
    unordered_map that maps function names to node class names.

    Args:
        output_path (str): Path where the generated header file will be written.
                          Defaults to the standard location in the maps directory.
    """
    print("Starting node factory map generation...")

    # Load all ImGui function names
    if not os.path.exists(JSON_PATH):
        print(f"Error: JSON file not found at {JSON_PATH}")
        return

    with open(JSON_PATH, 'r') as f:
        functions = json.load(f)

    print(f"Loaded {len(functions)} ImGui functions from JSON")

    node_map = {}
    includes = []

    processed_count = 0
    skipped_count = 0

    for func in functions:
        name = func['name']
        class_name = f"{name}Node"
        block_dir = name

        # Construct path to the expected node header file
        node_hpp = os.path.join(BLOCKS_DIR, block_dir, f"{camel_to_snake(block_dir)}_node.hpp")

        if os.path.isfile(node_hpp):
            # Add include directive for existing node header
            includes.append(f'#include "core/components/blocks/{block_dir}/{camel_to_snake(block_dir)}_node.hpp"')
            node_map[name] = class_name
            processed_count += 1
        else:
            # Skip functions without corresponding node implementations
            skipped_count += 1

    print(f"Processed {processed_count} functions with existing node headers")
    print(f"Skipped {skipped_count} functions without node headers")

    # Ensure output directory exists
    os.makedirs(os.path.dirname(output_path), exist_ok=True)

    # Write C++ header with map
    with open(output_path, 'w') as f:
        f.write('#pragma once\n')
        f.write('// This file is autogenerated by scripts/generate_node_factory_map.py. Do not edit manually, but edit the respective scripts to reflect the needed changes!\n')
        f.write('#include <string>\n#include <unordered_map>\n')
        for inc in includes:
            f.write(f'{inc}\n')
        f.write('\nstatic const std::unordered_map<std::string, std::string> NODE_CLASS_MAP = {\n')
        for block, class_name in node_map.items():
            f.write(f'    {{"{block}", "{class_name}"}},\n')
        f.write('};\n')

    print(f"Node factory map written to {output_path}")
    print(f"Generated map contains {len(node_map)} entries")

    # Create stub file in src directory
    os.makedirs(os.path.dirname(stub_output_path), exist_ok=True)
    with open(stub_output_path, 'w') as f:
        f.write('// This file is autogenerated by scripts/generate_node_factory_map.py. Do not edit manually, but edit the respective scripts to reflect the needed changes!\n')
        f.write('#include "generated/maps/NodeFactoryMap.hpp"\n')

    print(f"Stub file written to {stub_output_path}")


if __name__ == "__main__":
    main()
