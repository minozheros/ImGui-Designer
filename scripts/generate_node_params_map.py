#!/usr/bin/env python3

import os
import json
import re

BLOCKS_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '../src/core/components/blocks'))
JSON_PATH = os.path.join(os.path.dirname(__file__), 'output', 'imgui_functions.json')
MAPS_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '../src/core/types/maps'))
default_output = os.path.join(MAPS_DIR, 'node_params_map.hpp')

def camel_to_snake(name):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()

def main(output_path=default_output):
    # Load all ImGui function names
    with open(JSON_PATH, 'r') as f:
        functions = json.load(f)
    params_map_entries = []
    includes = set()
    for func in functions:
        name = func['name']
        class_name = f"{name}Params"
        block_dir = name
        params_hpp = os.path.join(BLOCKS_DIR, block_dir, f"{camel_to_snake(block_dir)}_params.hpp")
        if os.path.isfile(params_hpp):
            includes.add(f'#include "core/components/blocks/{block_dir}/{camel_to_snake(block_dir)}_params.hpp"')
        params_map_entries.append(f'    {{"{name}", []() -> std::unique_ptr<IParameterBase> {{ return std::make_unique<{class_name}>(); }}}}')
    # Write C++ header with map
    out_dir = os.path.dirname(output_path)
    os.makedirs(out_dir, exist_ok=True)
    with open(output_path, 'w') as f:
        f.write('#pragma once\n')
        f.write('// This file is autogenerated by scripts/generate_node_params_map.py. Do not edit manually.\n')
        f.write('// Auto-generated NodeParamsFactory map\n')
        f.write('#include <string>\n#include <unordered_map>\n#include <memory>\n#include <functional>\n#include <utility>\n')
        f.write('#include "core/types/interfaces/IParameterBase.hpp"\n')
        for inc in sorted(includes):
            f.write(f'{inc}\n')
        f.write('\nnamespace core {\n')
        f.write('static const std::unordered_map<std::string, std::function<std::unique_ptr<IParameterBase>()>> NODE_PARAMS_FACTORY = {\n')
        for entry in params_map_entries:
            f.write(f'{entry},\n')
        f.write('};\n')
        f.write('} // namespace core\n')
    print(f"Node params factory map written to {output_path}")

if __name__ == "__main__":
    main()
