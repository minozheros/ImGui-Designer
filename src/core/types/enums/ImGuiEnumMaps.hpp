// This file is autogenerated by scripts/generate_imgui_enum_maps.py. Do not edit manually, but edit the respective scripts to reflect the needed changes!

#pragma once
#include <imgui.h>
#include <nlohmann/json.hpp>
#include <string>
#include <unordered_map>

// ImGuiCol enum <-> string maps

static const std::unordered_map<ImGuiCol, std::string> ImGuiColToString = {};

static const std::unordered_map<std::string, ImGuiCol> StringToImGuiCol = {};

inline void to_json(nlohmann::json &j, const ImGuiCol &v)
{
    auto it = ImGuiColToString.find(v);
    if (it != ImGuiColToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiCol &v)
{
    auto it = StringToImGuiCol.find(j.get<std::string>());
    if (it != StringToImGuiCol.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiCol");
}

// ImGuiCond enum <-> string maps

static const std::unordered_map<ImGuiCond, std::string> ImGuiCondToString = {};

static const std::unordered_map<std::string, ImGuiCond> StringToImGuiCond = {};

inline void to_json(nlohmann::json &j, const ImGuiCond &v)
{
    auto it = ImGuiCondToString.find(v);
    if (it != ImGuiCondToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiCond &v)
{
    auto it = StringToImGuiCond.find(j.get<std::string>());
    if (it != StringToImGuiCond.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiCond");
}

// ImGuiDataType enum <-> string maps

static const std::unordered_map<ImGuiDataType, std::string> ImGuiDataTypeToString = {};

static const std::unordered_map<std::string, ImGuiDataType> StringToImGuiDataType = {};

inline void to_json(nlohmann::json &j, const ImGuiDataType &v)
{
    auto it = ImGuiDataTypeToString.find(v);
    if (it != ImGuiDataTypeToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiDataType &v)
{
    auto it = StringToImGuiDataType.find(j.get<std::string>());
    if (it != StringToImGuiDataType.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiDataType");
}

// ImGuiMouseButton enum <-> string maps

static const std::unordered_map<ImGuiMouseButton, std::string> ImGuiMouseButtonToString = {};

static const std::unordered_map<std::string, ImGuiMouseButton> StringToImGuiMouseButton = {};

inline void to_json(nlohmann::json &j, const ImGuiMouseButton &v)
{
    auto it = ImGuiMouseButtonToString.find(v);
    if (it != ImGuiMouseButtonToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiMouseButton &v)
{
    auto it = StringToImGuiMouseButton.find(j.get<std::string>());
    if (it != StringToImGuiMouseButton.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiMouseButton");
}

// ImGuiMouseCursor enum <-> string maps

static const std::unordered_map<ImGuiMouseCursor, std::string> ImGuiMouseCursorToString = {};

static const std::unordered_map<std::string, ImGuiMouseCursor> StringToImGuiMouseCursor = {};

inline void to_json(nlohmann::json &j, const ImGuiMouseCursor &v)
{
    auto it = ImGuiMouseCursorToString.find(v);
    if (it != ImGuiMouseCursorToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiMouseCursor &v)
{
    auto it = StringToImGuiMouseCursor.find(j.get<std::string>());
    if (it != StringToImGuiMouseCursor.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiMouseCursor");
}

// ImGuiStyleVar enum <-> string maps

static const std::unordered_map<ImGuiStyleVar, std::string> ImGuiStyleVarToString = {};

static const std::unordered_map<std::string, ImGuiStyleVar> StringToImGuiStyleVar = {};

inline void to_json(nlohmann::json &j, const ImGuiStyleVar &v)
{
    auto it = ImGuiStyleVarToString.find(v);
    if (it != ImGuiStyleVarToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiStyleVar &v)
{
    auto it = StringToImGuiStyleVar.find(j.get<std::string>());
    if (it != StringToImGuiStyleVar.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiStyleVar");
}

// ImGuiTableBgTarget enum <-> string maps

static const std::unordered_map<ImGuiTableBgTarget, std::string> ImGuiTableBgTargetToString = {};

static const std::unordered_map<std::string, ImGuiTableBgTarget> StringToImGuiTableBgTarget = {};

inline void to_json(nlohmann::json &j, const ImGuiTableBgTarget &v)
{
    auto it = ImGuiTableBgTargetToString.find(v);
    if (it != ImGuiTableBgTargetToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiTableBgTarget &v)
{
    auto it = StringToImGuiTableBgTarget.find(j.get<std::string>());
    if (it != StringToImGuiTableBgTarget.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiTableBgTarget");
}

// ImGuiBackendFlags enum <-> string maps

static const std::unordered_map<ImGuiBackendFlags, std::string> ImGuiBackendFlagsToString = {};

static const std::unordered_map<std::string, ImGuiBackendFlags> StringToImGuiBackendFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiBackendFlags &v)
{
    auto it = ImGuiBackendFlagsToString.find(v);
    if (it != ImGuiBackendFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiBackendFlags &v)
{
    auto it = StringToImGuiBackendFlags.find(j.get<std::string>());
    if (it != StringToImGuiBackendFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiBackendFlags");
}

// ImGuiButtonFlags enum <-> string maps

static const std::unordered_map<ImGuiButtonFlags, std::string> ImGuiButtonFlagsToString = {};

static const std::unordered_map<std::string, ImGuiButtonFlags> StringToImGuiButtonFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiButtonFlags &v)
{
    auto it = ImGuiButtonFlagsToString.find(v);
    if (it != ImGuiButtonFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiButtonFlags &v)
{
    auto it = StringToImGuiButtonFlags.find(j.get<std::string>());
    if (it != StringToImGuiButtonFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiButtonFlags");
}

// ImGuiChildFlags enum <-> string maps

static const std::unordered_map<ImGuiChildFlags, std::string> ImGuiChildFlagsToString = {};

static const std::unordered_map<std::string, ImGuiChildFlags> StringToImGuiChildFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiChildFlags &v)
{
    auto it = ImGuiChildFlagsToString.find(v);
    if (it != ImGuiChildFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiChildFlags &v)
{
    auto it = StringToImGuiChildFlags.find(j.get<std::string>());
    if (it != StringToImGuiChildFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiChildFlags");
}

// ImGuiColorEditFlags enum <-> string maps

static const std::unordered_map<ImGuiColorEditFlags, std::string> ImGuiColorEditFlagsToString = {};

static const std::unordered_map<std::string, ImGuiColorEditFlags> StringToImGuiColorEditFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiColorEditFlags &v)
{
    auto it = ImGuiColorEditFlagsToString.find(v);
    if (it != ImGuiColorEditFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiColorEditFlags &v)
{
    auto it = StringToImGuiColorEditFlags.find(j.get<std::string>());
    if (it != StringToImGuiColorEditFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiColorEditFlags");
}

// ImGuiConfigFlags enum <-> string maps

static const std::unordered_map<ImGuiConfigFlags, std::string> ImGuiConfigFlagsToString = {};

static const std::unordered_map<std::string, ImGuiConfigFlags> StringToImGuiConfigFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiConfigFlags &v)
{
    auto it = ImGuiConfigFlagsToString.find(v);
    if (it != ImGuiConfigFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiConfigFlags &v)
{
    auto it = StringToImGuiConfigFlags.find(j.get<std::string>());
    if (it != StringToImGuiConfigFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiConfigFlags");
}

// ImGuiComboFlags enum <-> string maps

static const std::unordered_map<ImGuiComboFlags, std::string> ImGuiComboFlagsToString = {};

static const std::unordered_map<std::string, ImGuiComboFlags> StringToImGuiComboFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiComboFlags &v)
{
    auto it = ImGuiComboFlagsToString.find(v);
    if (it != ImGuiComboFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiComboFlags &v)
{
    auto it = StringToImGuiComboFlags.find(j.get<std::string>());
    if (it != StringToImGuiComboFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiComboFlags");
}

// ImGuiDockNodeFlags enum <-> string maps

static const std::unordered_map<ImGuiDockNodeFlags, std::string> ImGuiDockNodeFlagsToString = {};

static const std::unordered_map<std::string, ImGuiDockNodeFlags> StringToImGuiDockNodeFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiDockNodeFlags &v)
{
    auto it = ImGuiDockNodeFlagsToString.find(v);
    if (it != ImGuiDockNodeFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiDockNodeFlags &v)
{
    auto it = StringToImGuiDockNodeFlags.find(j.get<std::string>());
    if (it != StringToImGuiDockNodeFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiDockNodeFlags");
}

// ImGuiDragDropFlags enum <-> string maps

static const std::unordered_map<ImGuiDragDropFlags, std::string> ImGuiDragDropFlagsToString = {};

static const std::unordered_map<std::string, ImGuiDragDropFlags> StringToImGuiDragDropFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiDragDropFlags &v)
{
    auto it = ImGuiDragDropFlagsToString.find(v);
    if (it != ImGuiDragDropFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiDragDropFlags &v)
{
    auto it = StringToImGuiDragDropFlags.find(j.get<std::string>());
    if (it != StringToImGuiDragDropFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiDragDropFlags");
}

// ImGuiFocusedFlags enum <-> string maps

static const std::unordered_map<ImGuiFocusedFlags, std::string> ImGuiFocusedFlagsToString = {};

static const std::unordered_map<std::string, ImGuiFocusedFlags> StringToImGuiFocusedFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiFocusedFlags &v)
{
    auto it = ImGuiFocusedFlagsToString.find(v);
    if (it != ImGuiFocusedFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiFocusedFlags &v)
{
    auto it = StringToImGuiFocusedFlags.find(j.get<std::string>());
    if (it != StringToImGuiFocusedFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiFocusedFlags");
}

// ImGuiHoveredFlags enum <-> string maps

static const std::unordered_map<ImGuiHoveredFlags, std::string> ImGuiHoveredFlagsToString = {};

static const std::unordered_map<std::string, ImGuiHoveredFlags> StringToImGuiHoveredFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiHoveredFlags &v)
{
    auto it = ImGuiHoveredFlagsToString.find(v);
    if (it != ImGuiHoveredFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiHoveredFlags &v)
{
    auto it = StringToImGuiHoveredFlags.find(j.get<std::string>());
    if (it != StringToImGuiHoveredFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiHoveredFlags");
}

// ImGuiInputFlags enum <-> string maps

static const std::unordered_map<ImGuiInputFlags, std::string> ImGuiInputFlagsToString = {};

static const std::unordered_map<std::string, ImGuiInputFlags> StringToImGuiInputFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiInputFlags &v)
{
    auto it = ImGuiInputFlagsToString.find(v);
    if (it != ImGuiInputFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiInputFlags &v)
{
    auto it = StringToImGuiInputFlags.find(j.get<std::string>());
    if (it != StringToImGuiInputFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiInputFlags");
}

// ImGuiInputTextFlags enum <-> string maps

static const std::unordered_map<ImGuiInputTextFlags, std::string> ImGuiInputTextFlagsToString = {};

static const std::unordered_map<std::string, ImGuiInputTextFlags> StringToImGuiInputTextFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiInputTextFlags &v)
{
    auto it = ImGuiInputTextFlagsToString.find(v);
    if (it != ImGuiInputTextFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiInputTextFlags &v)
{
    auto it = StringToImGuiInputTextFlags.find(j.get<std::string>());
    if (it != StringToImGuiInputTextFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiInputTextFlags");
}

// ImGuiItemFlags enum <-> string maps

static const std::unordered_map<ImGuiItemFlags, std::string> ImGuiItemFlagsToString = {};

static const std::unordered_map<std::string, ImGuiItemFlags> StringToImGuiItemFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiItemFlags &v)
{
    auto it = ImGuiItemFlagsToString.find(v);
    if (it != ImGuiItemFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiItemFlags &v)
{
    auto it = StringToImGuiItemFlags.find(j.get<std::string>());
    if (it != StringToImGuiItemFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiItemFlags");
}

// ImGuiKeyChord enum <-> string maps

static const std::unordered_map<ImGuiKeyChord, std::string> ImGuiKeyChordToString = {};

static const std::unordered_map<std::string, ImGuiKeyChord> StringToImGuiKeyChord = {};

inline void to_json(nlohmann::json &j, const ImGuiKeyChord &v)
{
    auto it = ImGuiKeyChordToString.find(v);
    if (it != ImGuiKeyChordToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiKeyChord &v)
{
    auto it = StringToImGuiKeyChord.find(j.get<std::string>());
    if (it != StringToImGuiKeyChord.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiKeyChord");
}

// ImGuiListClipperFlags enum <-> string maps

static const std::unordered_map<ImGuiListClipperFlags, std::string> ImGuiListClipperFlagsToString = {};

static const std::unordered_map<std::string, ImGuiListClipperFlags> StringToImGuiListClipperFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiListClipperFlags &v)
{
    auto it = ImGuiListClipperFlagsToString.find(v);
    if (it != ImGuiListClipperFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiListClipperFlags &v)
{
    auto it = StringToImGuiListClipperFlags.find(j.get<std::string>());
    if (it != StringToImGuiListClipperFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiListClipperFlags");
}

// ImGuiPopupFlags enum <-> string maps

static const std::unordered_map<ImGuiPopupFlags, std::string> ImGuiPopupFlagsToString = {};

static const std::unordered_map<std::string, ImGuiPopupFlags> StringToImGuiPopupFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiPopupFlags &v)
{
    auto it = ImGuiPopupFlagsToString.find(v);
    if (it != ImGuiPopupFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiPopupFlags &v)
{
    auto it = StringToImGuiPopupFlags.find(j.get<std::string>());
    if (it != StringToImGuiPopupFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiPopupFlags");
}

// ImGuiMultiSelectFlags enum <-> string maps

static const std::unordered_map<ImGuiMultiSelectFlags, std::string> ImGuiMultiSelectFlagsToString = {};

static const std::unordered_map<std::string, ImGuiMultiSelectFlags> StringToImGuiMultiSelectFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiMultiSelectFlags &v)
{
    auto it = ImGuiMultiSelectFlagsToString.find(v);
    if (it != ImGuiMultiSelectFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiMultiSelectFlags &v)
{
    auto it = StringToImGuiMultiSelectFlags.find(j.get<std::string>());
    if (it != StringToImGuiMultiSelectFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiMultiSelectFlags");
}

// ImGuiSelectableFlags enum <-> string maps

static const std::unordered_map<ImGuiSelectableFlags, std::string> ImGuiSelectableFlagsToString = {};

static const std::unordered_map<std::string, ImGuiSelectableFlags> StringToImGuiSelectableFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiSelectableFlags &v)
{
    auto it = ImGuiSelectableFlagsToString.find(v);
    if (it != ImGuiSelectableFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiSelectableFlags &v)
{
    auto it = StringToImGuiSelectableFlags.find(j.get<std::string>());
    if (it != StringToImGuiSelectableFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiSelectableFlags");
}

// ImGuiSliderFlags enum <-> string maps

static const std::unordered_map<ImGuiSliderFlags, std::string> ImGuiSliderFlagsToString = {};

static const std::unordered_map<std::string, ImGuiSliderFlags> StringToImGuiSliderFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiSliderFlags &v)
{
    auto it = ImGuiSliderFlagsToString.find(v);
    if (it != ImGuiSliderFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiSliderFlags &v)
{
    auto it = StringToImGuiSliderFlags.find(j.get<std::string>());
    if (it != StringToImGuiSliderFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiSliderFlags");
}

// ImGuiTabBarFlags enum <-> string maps

static const std::unordered_map<ImGuiTabBarFlags, std::string> ImGuiTabBarFlagsToString = {};

static const std::unordered_map<std::string, ImGuiTabBarFlags> StringToImGuiTabBarFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiTabBarFlags &v)
{
    auto it = ImGuiTabBarFlagsToString.find(v);
    if (it != ImGuiTabBarFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiTabBarFlags &v)
{
    auto it = StringToImGuiTabBarFlags.find(j.get<std::string>());
    if (it != StringToImGuiTabBarFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiTabBarFlags");
}

// ImGuiTabItemFlags enum <-> string maps

static const std::unordered_map<ImGuiTabItemFlags, std::string> ImGuiTabItemFlagsToString = {};

static const std::unordered_map<std::string, ImGuiTabItemFlags> StringToImGuiTabItemFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiTabItemFlags &v)
{
    auto it = ImGuiTabItemFlagsToString.find(v);
    if (it != ImGuiTabItemFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiTabItemFlags &v)
{
    auto it = StringToImGuiTabItemFlags.find(j.get<std::string>());
    if (it != StringToImGuiTabItemFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiTabItemFlags");
}

// ImGuiTableFlags enum <-> string maps

static const std::unordered_map<ImGuiTableFlags, std::string> ImGuiTableFlagsToString = {};

static const std::unordered_map<std::string, ImGuiTableFlags> StringToImGuiTableFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiTableFlags &v)
{
    auto it = ImGuiTableFlagsToString.find(v);
    if (it != ImGuiTableFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiTableFlags &v)
{
    auto it = StringToImGuiTableFlags.find(j.get<std::string>());
    if (it != StringToImGuiTableFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiTableFlags");
}

// ImGuiTableColumnFlags enum <-> string maps

static const std::unordered_map<ImGuiTableColumnFlags, std::string> ImGuiTableColumnFlagsToString = {};

static const std::unordered_map<std::string, ImGuiTableColumnFlags> StringToImGuiTableColumnFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiTableColumnFlags &v)
{
    auto it = ImGuiTableColumnFlagsToString.find(v);
    if (it != ImGuiTableColumnFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiTableColumnFlags &v)
{
    auto it = StringToImGuiTableColumnFlags.find(j.get<std::string>());
    if (it != StringToImGuiTableColumnFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiTableColumnFlags");
}

// ImGuiTableRowFlags enum <-> string maps

static const std::unordered_map<ImGuiTableRowFlags, std::string> ImGuiTableRowFlagsToString = {};

static const std::unordered_map<std::string, ImGuiTableRowFlags> StringToImGuiTableRowFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiTableRowFlags &v)
{
    auto it = ImGuiTableRowFlagsToString.find(v);
    if (it != ImGuiTableRowFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiTableRowFlags &v)
{
    auto it = StringToImGuiTableRowFlags.find(j.get<std::string>());
    if (it != StringToImGuiTableRowFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiTableRowFlags");
}

// ImGuiTreeNodeFlags enum <-> string maps

static const std::unordered_map<ImGuiTreeNodeFlags, std::string> ImGuiTreeNodeFlagsToString = {};

static const std::unordered_map<std::string, ImGuiTreeNodeFlags> StringToImGuiTreeNodeFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiTreeNodeFlags &v)
{
    auto it = ImGuiTreeNodeFlagsToString.find(v);
    if (it != ImGuiTreeNodeFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiTreeNodeFlags &v)
{
    auto it = StringToImGuiTreeNodeFlags.find(j.get<std::string>());
    if (it != StringToImGuiTreeNodeFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiTreeNodeFlags");
}

// ImGuiViewportFlags enum <-> string maps

static const std::unordered_map<ImGuiViewportFlags, std::string> ImGuiViewportFlagsToString = {};

static const std::unordered_map<std::string, ImGuiViewportFlags> StringToImGuiViewportFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiViewportFlags &v)
{
    auto it = ImGuiViewportFlagsToString.find(v);
    if (it != ImGuiViewportFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiViewportFlags &v)
{
    auto it = StringToImGuiViewportFlags.find(j.get<std::string>());
    if (it != StringToImGuiViewportFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiViewportFlags");
}

// ImGuiWindowFlags enum <-> string maps

static const std::unordered_map<ImGuiWindowFlags, std::string> ImGuiWindowFlagsToString = {};

static const std::unordered_map<std::string, ImGuiWindowFlags> StringToImGuiWindowFlags = {};

inline void to_json(nlohmann::json &j, const ImGuiWindowFlags &v)
{
    auto it = ImGuiWindowFlagsToString.find(v);
    if (it != ImGuiWindowFlagsToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiWindowFlags &v)
{
    auto it = StringToImGuiWindowFlags.find(j.get<std::string>());
    if (it != StringToImGuiWindowFlags.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiWindowFlags");
}

// ImGuiSelectionUserData enum <-> string maps

static const std::unordered_map<ImGuiSelectionUserData, std::string> ImGuiSelectionUserDataToString = {};

static const std::unordered_map<std::string, ImGuiSelectionUserData> StringToImGuiSelectionUserData = {};

inline void to_json(nlohmann::json &j, const ImGuiSelectionUserData &v)
{
    auto it = ImGuiSelectionUserDataToString.find(v);
    if (it != ImGuiSelectionUserDataToString.end())
        j = it->second;
    else
        j = nullptr;
}

inline void from_json(const nlohmann::json &j, ImGuiSelectionUserData &v)
{
    auto it = StringToImGuiSelectionUserData.find(j.get<std::string>());
    if (it != StringToImGuiSelectionUserData.end())
        v = it->second;
    else
        throw std::runtime_error("invalid enum value for ImGuiSelectionUserData");
}
