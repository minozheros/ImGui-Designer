#pragma once
// This file is autogenerated by scripts/generate_node_params_map.py. Do not edit manually.
// Auto-generated NodeParamsFactory map
#include <string>
#include <unordered_map>
#include <memory>
#include <functional>
#include <utility>
#include "core/types/interfaces/IParameterParamsBase.hpp"
#include "core/components/blocks/AlignTextToFramePadding/align_text_to_frame_padding_params.hpp"
#include "core/components/blocks/ArrowButton/arrow_button_params.hpp"
#include "core/components/blocks/Begin/begin_params.hpp"
#include "core/components/blocks/BeginCombo/begin_combo_params.hpp"
#include "core/components/blocks/BeginDisabled/begin_disabled_params.hpp"
#include "core/components/blocks/BeginDragDropSource/begin_drag_drop_source_params.hpp"
#include "core/components/blocks/BeginDragDropTarget/begin_drag_drop_target_params.hpp"
#include "core/components/blocks/BeginGroup/begin_group_params.hpp"
#include "core/components/blocks/BeginItemTooltip/begin_item_tooltip_params.hpp"
#include "core/components/blocks/BeginMainMenuBar/begin_main_menu_bar_params.hpp"
#include "core/components/blocks/BeginMenu/begin_menu_params.hpp"
#include "core/components/blocks/BeginMenuBar/begin_menu_bar_params.hpp"
#include "core/components/blocks/BeginMultiSelect/begin_multi_select_params.hpp"
#include "core/components/blocks/BeginPopup/begin_popup_params.hpp"
#include "core/components/blocks/BeginPopupContextItem/begin_popup_context_item_params.hpp"
#include "core/components/blocks/BeginPopupContextVoid/begin_popup_context_void_params.hpp"
#include "core/components/blocks/BeginPopupContextWindow/begin_popup_context_window_params.hpp"
#include "core/components/blocks/BeginPopupModal/begin_popup_modal_params.hpp"
#include "core/components/blocks/BeginTabBar/begin_tab_bar_params.hpp"
#include "core/components/blocks/BeginTabItem/begin_tab_item_params.hpp"
#include "core/components/blocks/BeginTooltip/begin_tooltip_params.hpp"
#include "core/components/blocks/Bullet/bullet_params.hpp"
#include "core/components/blocks/CalcItemWidth/calc_item_width_params.hpp"
#include "core/components/blocks/CalcTextSize/calc_text_size_params.hpp"
#include "core/components/blocks/Checkbox/checkbox_params.hpp"
#include "core/components/blocks/CheckboxFlags/checkbox_flags_params.hpp"
#include "core/components/blocks/CloseCurrentPopup/close_current_popup_params.hpp"
#include "core/components/blocks/CollapsingHeader/collapsing_header_params.hpp"
#include "core/components/blocks/ColorConvertFloat4ToU32/color_convert_float4_to_u32_params.hpp"
#include "core/components/blocks/ColorConvertHSVtoRGB/color_convert_hs_vto_rgb_params.hpp"
#include "core/components/blocks/ColorConvertRGBtoHSV/color_convert_rg_bto_hsv_params.hpp"
#include "core/components/blocks/ColorConvertU32ToFloat4/color_convert_u32_to_float4_params.hpp"
#include "core/components/blocks/ColorEdit3/color_edit3_params.hpp"
#include "core/components/blocks/ColorEdit4/color_edit4_params.hpp"
#include "core/components/blocks/ColorPicker3/color_picker3_params.hpp"
#include "core/components/blocks/ColorPicker4/color_picker4_params.hpp"
#include "core/components/blocks/Columns/columns_params.hpp"
#include "core/components/blocks/Combo/combo_params.hpp"
#include "core/components/blocks/CreateContext/create_context_params.hpp"
#include "core/components/blocks/DebugCheckVersionAndDataLayout/debug_check_version_and_data_layout_params.hpp"
#include "core/components/blocks/DebugFlashStyleColor/debug_flash_style_color_params.hpp"
#include "core/components/blocks/DebugStartItemPicker/debug_start_item_picker_params.hpp"
#include "core/components/blocks/DebugTextEncoding/debug_text_encoding_params.hpp"
#include "core/components/blocks/DestroyContext/destroy_context_params.hpp"
#include "core/components/blocks/DestroyPlatformWindows/destroy_platform_windows_params.hpp"
#include "core/components/blocks/DockSpaceOverViewport/dock_space_over_viewport_params.hpp"
#include "core/components/blocks/DragFloat/drag_float_params.hpp"
#include "core/components/blocks/DragFloat2/drag_float2_params.hpp"
#include "core/components/blocks/DragFloat3/drag_float3_params.hpp"
#include "core/components/blocks/DragFloat4/drag_float4_params.hpp"
#include "core/components/blocks/DragFloatRange2/drag_float_range2_params.hpp"
#include "core/components/blocks/DragInt/drag_int_params.hpp"
#include "core/components/blocks/DragInt2/drag_int2_params.hpp"
#include "core/components/blocks/DragInt3/drag_int3_params.hpp"
#include "core/components/blocks/DragInt4/drag_int4_params.hpp"
#include "core/components/blocks/DragIntRange2/drag_int_range2_params.hpp"
#include "core/components/blocks/DragScalar/drag_scalar_params.hpp"
#include "core/components/blocks/DragScalarN/drag_scalar_n_params.hpp"
#include "core/components/blocks/Dummy/dummy_params.hpp"
#include "core/components/blocks/End/end_params.hpp"
#include "core/components/blocks/EndChild/end_child_params.hpp"
#include "core/components/blocks/EndCombo/end_combo_params.hpp"
#include "core/components/blocks/EndDisabled/end_disabled_params.hpp"
#include "core/components/blocks/EndDragDropSource/end_drag_drop_source_params.hpp"
#include "core/components/blocks/EndDragDropTarget/end_drag_drop_target_params.hpp"
#include "core/components/blocks/EndFrame/end_frame_params.hpp"
#include "core/components/blocks/EndGroup/end_group_params.hpp"
#include "core/components/blocks/EndListBox/end_list_box_params.hpp"
#include "core/components/blocks/EndMainMenuBar/end_main_menu_bar_params.hpp"
#include "core/components/blocks/EndMenu/end_menu_params.hpp"
#include "core/components/blocks/EndMenuBar/end_menu_bar_params.hpp"
#include "core/components/blocks/EndMultiSelect/end_multi_select_params.hpp"
#include "core/components/blocks/EndPopup/end_popup_params.hpp"
#include "core/components/blocks/EndTabBar/end_tab_bar_params.hpp"
#include "core/components/blocks/EndTabItem/end_tab_item_params.hpp"
#include "core/components/blocks/EndTable/end_table_params.hpp"
#include "core/components/blocks/EndTooltip/end_tooltip_params.hpp"
#include "core/components/blocks/FindViewportByID/find_viewport_by_id_params.hpp"
#include "core/components/blocks/FindViewportByPlatformHandle/find_viewport_by_platform_handle_params.hpp"
#include "core/components/blocks/GetAllocatorFunctions/get_allocator_functions_params.hpp"
#include "core/components/blocks/GetBackgroundDrawList/get_background_draw_list_params.hpp"
#include "core/components/blocks/GetColorU32/get_color_u32_params.hpp"
#include "core/components/blocks/GetColumnIndex/get_column_index_params.hpp"
#include "core/components/blocks/GetColumnOffset/get_column_offset_params.hpp"
#include "core/components/blocks/GetColumnWidth/get_column_width_params.hpp"
#include "core/components/blocks/GetColumnsCount/get_columns_count_params.hpp"
#include "core/components/blocks/GetContentRegionAvail/get_content_region_avail_params.hpp"
#include "core/components/blocks/GetCurrentContext/get_current_context_params.hpp"
#include "core/components/blocks/GetCursorPos/get_cursor_pos_params.hpp"
#include "core/components/blocks/GetCursorPosX/get_cursor_pos_x_params.hpp"
#include "core/components/blocks/GetCursorPosY/get_cursor_pos_y_params.hpp"
#include "core/components/blocks/GetCursorScreenPos/get_cursor_screen_pos_params.hpp"
#include "core/components/blocks/GetCursorStartPos/get_cursor_start_pos_params.hpp"
#include "core/components/blocks/GetDrawData/get_draw_data_params.hpp"
#include "core/components/blocks/GetDrawListSharedData/get_draw_list_shared_data_params.hpp"
#include "core/components/blocks/GetFont/get_font_params.hpp"
#include "core/components/blocks/GetFontBaked/get_font_baked_params.hpp"
#include "core/components/blocks/GetFontSize/get_font_size_params.hpp"
#include "core/components/blocks/GetFontTexUvWhitePixel/get_font_tex_uv_white_pixel_params.hpp"
#include "core/components/blocks/GetForegroundDrawList/get_foreground_draw_list_params.hpp"
#include "core/components/blocks/GetFrameCount/get_frame_count_params.hpp"
#include "core/components/blocks/GetFrameHeight/get_frame_height_params.hpp"
#include "core/components/blocks/GetFrameHeightWithSpacing/get_frame_height_with_spacing_params.hpp"
#include "core/components/blocks/GetID/get_id_params.hpp"
#include "core/components/blocks/GetIO/get_io_params.hpp"
#include "core/components/blocks/GetItemID/get_item_id_params.hpp"
#include "core/components/blocks/GetItemRectMax/get_item_rect_max_params.hpp"
#include "core/components/blocks/GetItemRectMin/get_item_rect_min_params.hpp"
#include "core/components/blocks/GetItemRectSize/get_item_rect_size_params.hpp"
#include "core/components/blocks/GetKeyPressedAmount/get_key_pressed_amount_params.hpp"
#include "core/components/blocks/GetMainViewport/get_main_viewport_params.hpp"
#include "core/components/blocks/GetMouseClickedCount/get_mouse_clicked_count_params.hpp"
#include "core/components/blocks/GetMouseCursor/get_mouse_cursor_params.hpp"
#include "core/components/blocks/GetMouseDragDelta/get_mouse_drag_delta_params.hpp"
#include "core/components/blocks/GetMousePos/get_mouse_pos_params.hpp"
#include "core/components/blocks/GetMousePosOnOpeningCurrentPopup/get_mouse_pos_on_opening_current_popup_params.hpp"
#include "core/components/blocks/GetPlatformIO/get_platform_io_params.hpp"
#include "core/components/blocks/GetScrollMaxX/get_scroll_max_x_params.hpp"
#include "core/components/blocks/GetScrollMaxY/get_scroll_max_y_params.hpp"
#include "core/components/blocks/GetScrollX/get_scroll_x_params.hpp"
#include "core/components/blocks/GetScrollY/get_scroll_y_params.hpp"
#include "core/components/blocks/GetStateStorage/get_state_storage_params.hpp"
#include "core/components/blocks/GetStyle/get_style_params.hpp"
#include "core/components/blocks/GetTextLineHeight/get_text_line_height_params.hpp"
#include "core/components/blocks/GetTextLineHeightWithSpacing/get_text_line_height_with_spacing_params.hpp"
#include "core/components/blocks/GetTime/get_time_params.hpp"
#include "core/components/blocks/GetTreeNodeToLabelSpacing/get_tree_node_to_label_spacing_params.hpp"
#include "core/components/blocks/GetWindowDockID/get_window_dock_id_params.hpp"
#include "core/components/blocks/GetWindowDpiScale/get_window_dpi_scale_params.hpp"
#include "core/components/blocks/GetWindowDrawList/get_window_draw_list_params.hpp"
#include "core/components/blocks/GetWindowHeight/get_window_height_params.hpp"
#include "core/components/blocks/GetWindowPos/get_window_pos_params.hpp"
#include "core/components/blocks/GetWindowSize/get_window_size_params.hpp"
#include "core/components/blocks/GetWindowWidth/get_window_width_params.hpp"
#include "core/components/blocks/Indent/indent_params.hpp"
#include "core/components/blocks/InputDouble/input_double_params.hpp"
#include "core/components/blocks/InputFloat/input_float_params.hpp"
#include "core/components/blocks/InputFloat2/input_float2_params.hpp"
#include "core/components/blocks/InputFloat3/input_float3_params.hpp"
#include "core/components/blocks/InputFloat4/input_float4_params.hpp"
#include "core/components/blocks/InputInt/input_int_params.hpp"
#include "core/components/blocks/InputInt2/input_int2_params.hpp"
#include "core/components/blocks/InputInt3/input_int3_params.hpp"
#include "core/components/blocks/InputInt4/input_int4_params.hpp"
#include "core/components/blocks/InputScalar/input_scalar_params.hpp"
#include "core/components/blocks/InputScalarN/input_scalar_n_params.hpp"
#include "core/components/blocks/InputText/input_text_params.hpp"
#include "core/components/blocks/InputTextWithHint/input_text_with_hint_params.hpp"
#include "core/components/blocks/InvisibleButton/invisible_button_params.hpp"
#include "core/components/blocks/IsAnyItemActive/is_any_item_active_params.hpp"
#include "core/components/blocks/IsAnyItemFocused/is_any_item_focused_params.hpp"
#include "core/components/blocks/IsAnyItemHovered/is_any_item_hovered_params.hpp"
#include "core/components/blocks/IsAnyMouseDown/is_any_mouse_down_params.hpp"
#include "core/components/blocks/IsItemActivated/is_item_activated_params.hpp"
#include "core/components/blocks/IsItemActive/is_item_active_params.hpp"
#include "core/components/blocks/IsItemClicked/is_item_clicked_params.hpp"
#include "core/components/blocks/IsItemDeactivated/is_item_deactivated_params.hpp"
#include "core/components/blocks/IsItemDeactivatedAfterEdit/is_item_deactivated_after_edit_params.hpp"
#include "core/components/blocks/IsItemEdited/is_item_edited_params.hpp"
#include "core/components/blocks/IsItemFocused/is_item_focused_params.hpp"
#include "core/components/blocks/IsItemHovered/is_item_hovered_params.hpp"
#include "core/components/blocks/IsItemToggledOpen/is_item_toggled_open_params.hpp"
#include "core/components/blocks/IsItemToggledSelection/is_item_toggled_selection_params.hpp"
#include "core/components/blocks/IsItemVisible/is_item_visible_params.hpp"
#include "core/components/blocks/IsKeyChordPressed/is_key_chord_pressed_params.hpp"
#include "core/components/blocks/IsKeyDown/is_key_down_params.hpp"
#include "core/components/blocks/IsKeyPressed/is_key_pressed_params.hpp"
#include "core/components/blocks/IsKeyReleased/is_key_released_params.hpp"
#include "core/components/blocks/IsMouseClicked/is_mouse_clicked_params.hpp"
#include "core/components/blocks/IsMouseDoubleClicked/is_mouse_double_clicked_params.hpp"
#include "core/components/blocks/IsMouseDown/is_mouse_down_params.hpp"
#include "core/components/blocks/IsMouseDragging/is_mouse_dragging_params.hpp"
#include "core/components/blocks/IsMouseHoveringRect/is_mouse_hovering_rect_params.hpp"
#include "core/components/blocks/IsMousePosValid/is_mouse_pos_valid_params.hpp"
#include "core/components/blocks/IsMouseReleased/is_mouse_released_params.hpp"
#include "core/components/blocks/IsMouseReleasedWithDelay/is_mouse_released_with_delay_params.hpp"
#include "core/components/blocks/IsPopupOpen/is_popup_open_params.hpp"
#include "core/components/blocks/IsRectVisible/is_rect_visible_params.hpp"
#include "core/components/blocks/IsWindowAppearing/is_window_appearing_params.hpp"
#include "core/components/blocks/IsWindowCollapsed/is_window_collapsed_params.hpp"
#include "core/components/blocks/IsWindowDocked/is_window_docked_params.hpp"
#include "core/components/blocks/IsWindowFocused/is_window_focused_params.hpp"
#include "core/components/blocks/IsWindowHovered/is_window_hovered_params.hpp"
#include "core/components/blocks/ListBox/list_box_params.hpp"
#include "core/components/blocks/LoadIniSettingsFromDisk/load_ini_settings_from_disk_params.hpp"
#include "core/components/blocks/LoadIniSettingsFromMemory/load_ini_settings_from_memory_params.hpp"
#include "core/components/blocks/LogButtons/log_buttons_params.hpp"
#include "core/components/blocks/LogFinish/log_finish_params.hpp"
#include "core/components/blocks/LogToClipboard/log_to_clipboard_params.hpp"
#include "core/components/blocks/LogToFile/log_to_file_params.hpp"
#include "core/components/blocks/LogToTTY/log_to_tty_params.hpp"
#include "core/components/blocks/MemAlloc/mem_alloc_params.hpp"
#include "core/components/blocks/MemFree/mem_free_params.hpp"
#include "core/components/blocks/MenuItem/menu_item_params.hpp"
#include "core/components/blocks/NewFrame/new_frame_params.hpp"
#include "core/components/blocks/NewLine/new_line_params.hpp"
#include "core/components/blocks/NextColumn/next_column_params.hpp"
#include "core/components/blocks/OpenPopup/open_popup_params.hpp"
#include "core/components/blocks/OpenPopupOnItemClick/open_popup_on_item_click_params.hpp"
#include "core/components/blocks/PopClipRect/pop_clip_rect_params.hpp"
#include "core/components/blocks/PopFont/pop_font_params.hpp"
#include "core/components/blocks/PopID/pop_id_params.hpp"
#include "core/components/blocks/PopItemFlag/pop_item_flag_params.hpp"
#include "core/components/blocks/PopItemWidth/pop_item_width_params.hpp"
#include "core/components/blocks/PopStyleColor/pop_style_color_params.hpp"
#include "core/components/blocks/PopStyleVar/pop_style_var_params.hpp"
#include "core/components/blocks/PopTextWrapPos/pop_text_wrap_pos_params.hpp"
#include "core/components/blocks/PushClipRect/push_clip_rect_params.hpp"
#include "core/components/blocks/PushFont/push_font_params.hpp"
#include "core/components/blocks/PushID/push_id_params.hpp"
#include "core/components/blocks/PushItemFlag/push_item_flag_params.hpp"
#include "core/components/blocks/PushItemWidth/push_item_width_params.hpp"
#include "core/components/blocks/PushStyleColor/push_style_color_params.hpp"
#include "core/components/blocks/PushStyleVar/push_style_var_params.hpp"
#include "core/components/blocks/PushStyleVarX/push_style_var_x_params.hpp"
#include "core/components/blocks/PushStyleVarY/push_style_var_y_params.hpp"
#include "core/components/blocks/PushTextWrapPos/push_text_wrap_pos_params.hpp"
#include "core/components/blocks/RadioButton/radio_button_params.hpp"
#include "core/components/blocks/Render/render_params.hpp"
#include "core/components/blocks/RenderPlatformWindowsDefault/render_platform_windows_default_params.hpp"
#include "core/components/blocks/ResetMouseDragDelta/reset_mouse_drag_delta_params.hpp"
#include "core/components/blocks/SameLine/same_line_params.hpp"
#include "core/components/blocks/SaveIniSettingsToDisk/save_ini_settings_to_disk_params.hpp"
#include "core/components/blocks/Separator/separator_params.hpp"
#include "core/components/blocks/SeparatorText/separator_text_params.hpp"
#include "core/components/blocks/SetAllocatorFunctions/set_allocator_functions_params.hpp"
#include "core/components/blocks/SetClipboardText/set_clipboard_text_params.hpp"
#include "core/components/blocks/SetColorEditOptions/set_color_edit_options_params.hpp"
#include "core/components/blocks/SetColumnOffset/set_column_offset_params.hpp"
#include "core/components/blocks/SetColumnWidth/set_column_width_params.hpp"
#include "core/components/blocks/SetCurrentContext/set_current_context_params.hpp"
#include "core/components/blocks/SetCursorPos/set_cursor_pos_params.hpp"
#include "core/components/blocks/SetCursorPosX/set_cursor_pos_x_params.hpp"
#include "core/components/blocks/SetCursorPosY/set_cursor_pos_y_params.hpp"
#include "core/components/blocks/SetCursorScreenPos/set_cursor_screen_pos_params.hpp"
#include "core/components/blocks/SetDragDropPayload/set_drag_drop_payload_params.hpp"
#include "core/components/blocks/SetItemDefaultFocus/set_item_default_focus_params.hpp"
#include "core/components/blocks/SetItemKeyOwner/set_item_key_owner_params.hpp"
#include "core/components/blocks/SetKeyboardFocusHere/set_keyboard_focus_here_params.hpp"
#include "core/components/blocks/SetMouseCursor/set_mouse_cursor_params.hpp"
#include "core/components/blocks/SetNavCursorVisible/set_nav_cursor_visible_params.hpp"
#include "core/components/blocks/SetNextFrameWantCaptureKeyboard/set_next_frame_want_capture_keyboard_params.hpp"
#include "core/components/blocks/SetNextFrameWantCaptureMouse/set_next_frame_want_capture_mouse_params.hpp"
#include "core/components/blocks/SetNextItemAllowOverlap/set_next_item_allow_overlap_params.hpp"
#include "core/components/blocks/SetNextItemOpen/set_next_item_open_params.hpp"
#include "core/components/blocks/SetNextItemSelectionUserData/set_next_item_selection_user_data_params.hpp"
#include "core/components/blocks/SetNextItemShortcut/set_next_item_shortcut_params.hpp"
#include "core/components/blocks/SetNextItemStorageID/set_next_item_storage_id_params.hpp"
#include "core/components/blocks/SetNextItemWidth/set_next_item_width_params.hpp"
#include "core/components/blocks/SetNextWindowBgAlpha/set_next_window_bg_alpha_params.hpp"
#include "core/components/blocks/SetNextWindowClass/set_next_window_class_params.hpp"
#include "core/components/blocks/SetNextWindowCollapsed/set_next_window_collapsed_params.hpp"
#include "core/components/blocks/SetNextWindowContentSize/set_next_window_content_size_params.hpp"
#include "core/components/blocks/SetNextWindowDockID/set_next_window_dock_id_params.hpp"
#include "core/components/blocks/SetNextWindowFocus/set_next_window_focus_params.hpp"
#include "core/components/blocks/SetNextWindowScroll/set_next_window_scroll_params.hpp"
#include "core/components/blocks/SetNextWindowSize/set_next_window_size_params.hpp"
#include "core/components/blocks/SetNextWindowSizeConstraints/set_next_window_size_constraints_params.hpp"
#include "core/components/blocks/SetNextWindowViewport/set_next_window_viewport_params.hpp"
#include "core/components/blocks/SetScrollFromPosX/set_scroll_from_pos_x_params.hpp"
#include "core/components/blocks/SetScrollFromPosY/set_scroll_from_pos_y_params.hpp"
#include "core/components/blocks/SetScrollHereX/set_scroll_here_x_params.hpp"
#include "core/components/blocks/SetScrollHereY/set_scroll_here_y_params.hpp"
#include "core/components/blocks/SetScrollX/set_scroll_x_params.hpp"
#include "core/components/blocks/SetScrollY/set_scroll_y_params.hpp"
#include "core/components/blocks/SetStateStorage/set_state_storage_params.hpp"
#include "core/components/blocks/SetTabItemClosed/set_tab_item_closed_params.hpp"
#include "core/components/blocks/SetWindowCollapsed/set_window_collapsed_params.hpp"
#include "core/components/blocks/SetWindowFocus/set_window_focus_params.hpp"
#include "core/components/blocks/SetWindowPos/set_window_pos_params.hpp"
#include "core/components/blocks/SetWindowSize/set_window_size_params.hpp"
#include "core/components/blocks/Shortcut/shortcut_params.hpp"
#include "core/components/blocks/ShowAboutWindow/show_about_window_params.hpp"
#include "core/components/blocks/ShowDebugLogWindow/show_debug_log_window_params.hpp"
#include "core/components/blocks/ShowDemoWindow/show_demo_window_params.hpp"
#include "core/components/blocks/ShowFontSelector/show_font_selector_params.hpp"
#include "core/components/blocks/ShowIDStackToolWindow/show_id_stack_tool_window_params.hpp"
#include "core/components/blocks/ShowMetricsWindow/show_metrics_window_params.hpp"
#include "core/components/blocks/ShowStyleEditor/show_style_editor_params.hpp"
#include "core/components/blocks/ShowStyleSelector/show_style_selector_params.hpp"
#include "core/components/blocks/ShowUserGuide/show_user_guide_params.hpp"
#include "core/components/blocks/SliderAngle/slider_angle_params.hpp"
#include "core/components/blocks/SliderFloat/slider_float_params.hpp"
#include "core/components/blocks/SliderFloat2/slider_float2_params.hpp"
#include "core/components/blocks/SliderFloat3/slider_float3_params.hpp"
#include "core/components/blocks/SliderFloat4/slider_float4_params.hpp"
#include "core/components/blocks/SliderInt/slider_int_params.hpp"
#include "core/components/blocks/SliderInt2/slider_int2_params.hpp"
#include "core/components/blocks/SliderInt3/slider_int3_params.hpp"
#include "core/components/blocks/SliderInt4/slider_int4_params.hpp"
#include "core/components/blocks/SliderScalar/slider_scalar_params.hpp"
#include "core/components/blocks/SliderScalarN/slider_scalar_n_params.hpp"
#include "core/components/blocks/SmallButton/small_button_params.hpp"
#include "core/components/blocks/Spacing/spacing_params.hpp"
#include "core/components/blocks/StyleColorsClassic/style_colors_classic_params.hpp"
#include "core/components/blocks/StyleColorsDark/style_colors_dark_params.hpp"
#include "core/components/blocks/StyleColorsLight/style_colors_light_params.hpp"
#include "core/components/blocks/TabItemButton/tab_item_button_params.hpp"
#include "core/components/blocks/TableAngledHeadersRow/table_angled_headers_row_params.hpp"
#include "core/components/blocks/TableGetColumnCount/table_get_column_count_params.hpp"
#include "core/components/blocks/TableGetColumnFlags/table_get_column_flags_params.hpp"
#include "core/components/blocks/TableGetColumnIndex/table_get_column_index_params.hpp"
#include "core/components/blocks/TableGetHoveredColumn/table_get_hovered_column_params.hpp"
#include "core/components/blocks/TableGetRowIndex/table_get_row_index_params.hpp"
#include "core/components/blocks/TableGetSortSpecs/table_get_sort_specs_params.hpp"
#include "core/components/blocks/TableHeader/table_header_params.hpp"
#include "core/components/blocks/TableHeadersRow/table_headers_row_params.hpp"
#include "core/components/blocks/TableNextColumn/table_next_column_params.hpp"
#include "core/components/blocks/TableNextRow/table_next_row_params.hpp"
#include "core/components/blocks/TableSetBgColor/table_set_bg_color_params.hpp"
#include "core/components/blocks/TableSetColumnEnabled/table_set_column_enabled_params.hpp"
#include "core/components/blocks/TableSetColumnIndex/table_set_column_index_params.hpp"
#include "core/components/blocks/TableSetupColumn/table_setup_column_params.hpp"
#include "core/components/blocks/TableSetupScrollFreeze/table_setup_scroll_freeze_params.hpp"
#include "core/components/blocks/TextLink/text_link_params.hpp"
#include "core/components/blocks/TextLinkOpenURL/text_link_open_url_params.hpp"
#include "core/components/blocks/TextUnformatted/text_unformatted_params.hpp"
#include "core/components/blocks/TreeNode/tree_node_params.hpp"
#include "core/components/blocks/TreeNodeEx/tree_node_ex_params.hpp"
#include "core/components/blocks/TreePop/tree_pop_params.hpp"
#include "core/components/blocks/TreePush/tree_push_params.hpp"
#include "core/components/blocks/Unindent/unindent_params.hpp"
#include "core/components/blocks/UpdatePlatformWindows/update_platform_windows_params.hpp"
#include "core/components/blocks/VSliderFloat/v_slider_float_params.hpp"
#include "core/components/blocks/VSliderInt/v_slider_int_params.hpp"
#include "core/components/blocks/VSliderScalar/v_slider_scalar_params.hpp"
#include "core/components/blocks/Value/value_params.hpp"

namespace core {
static const std::unordered_map<std::string, std::function<std::unique_ptr<IParameterParamsBase>()>> NODE_PARAMS_FACTORY = {
    {"CreateContext", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<CreateContextParams>(); }},
    {"DestroyContext", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<DestroyContextParams>(); }},
    {"GetCurrentContext", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetCurrentContextParams>(); }},
    {"SetCurrentContext", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetCurrentContextParams>(); }},
    {"GetIO", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetIOParams>(); }},
    {"GetPlatformIO", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetPlatformIOParams>(); }},
    {"GetStyle", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetStyleParams>(); }},
    {"NewFrame", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<NewFrameParams>(); }},
    {"EndFrame", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<EndFrameParams>(); }},
    {"Render", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<RenderParams>(); }},
    {"GetDrawData", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetDrawDataParams>(); }},
    {"ShowDemoWindow", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ShowDemoWindowParams>(); }},
    {"ShowMetricsWindow", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ShowMetricsWindowParams>(); }},
    {"ShowDebugLogWindow", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ShowDebugLogWindowParams>(); }},
    {"ShowIDStackToolWindow", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ShowIDStackToolWindowParams>(); }},
    {"ShowAboutWindow", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ShowAboutWindowParams>(); }},
    {"ShowStyleEditor", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ShowStyleEditorParams>(); }},
    {"ShowStyleSelector", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ShowStyleSelectorParams>(); }},
    {"ShowFontSelector", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ShowFontSelectorParams>(); }},
    {"ShowUserGuide", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ShowUserGuideParams>(); }},
    {"StyleColorsDark", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<StyleColorsDarkParams>(); }},
    {"StyleColorsLight", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<StyleColorsLightParams>(); }},
    {"StyleColorsClassic", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<StyleColorsClassicParams>(); }},
    {"Begin", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<BeginParams>(); }},
    {"End", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<EndParams>(); }},
    {"EndChild", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<EndChildParams>(); }},
    {"IsWindowAppearing", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsWindowAppearingParams>(); }},
    {"IsWindowCollapsed", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsWindowCollapsedParams>(); }},
    {"IsWindowFocused", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsWindowFocusedParams>(); }},
    {"IsWindowHovered", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsWindowHoveredParams>(); }},
    {"GetWindowDrawList", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetWindowDrawListParams>(); }},
    {"GetWindowDpiScale", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetWindowDpiScaleParams>(); }},
    {"GetWindowPos", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetWindowPosParams>(); }},
    {"GetWindowSize", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetWindowSizeParams>(); }},
    {"GetWindowWidth", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetWindowWidthParams>(); }},
    {"GetWindowHeight", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetWindowHeightParams>(); }},
    {"SetNextWindowSize", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetNextWindowSizeParams>(); }},
    {"SetNextWindowSizeConstraints", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetNextWindowSizeConstraintsParams>(); }},
    {"SetNextWindowContentSize", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetNextWindowContentSizeParams>(); }},
    {"SetNextWindowCollapsed", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetNextWindowCollapsedParams>(); }},
    {"SetNextWindowFocus", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetNextWindowFocusParams>(); }},
    {"SetNextWindowScroll", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetNextWindowScrollParams>(); }},
    {"SetNextWindowBgAlpha", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetNextWindowBgAlphaParams>(); }},
    {"SetNextWindowViewport", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetNextWindowViewportParams>(); }},
    {"SetWindowPos", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetWindowPosParams>(); }},
    {"SetWindowSize", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetWindowSizeParams>(); }},
    {"SetWindowCollapsed", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetWindowCollapsedParams>(); }},
    {"SetWindowFocus", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetWindowFocusParams>(); }},
    {"SetWindowPos", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetWindowPosParams>(); }},
    {"SetWindowSize", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetWindowSizeParams>(); }},
    {"SetWindowCollapsed", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetWindowCollapsedParams>(); }},
    {"SetWindowFocus", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetWindowFocusParams>(); }},
    {"GetScrollX", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetScrollXParams>(); }},
    {"GetScrollY", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetScrollYParams>(); }},
    {"SetScrollX", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetScrollXParams>(); }},
    {"SetScrollY", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetScrollYParams>(); }},
    {"GetScrollMaxX", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetScrollMaxXParams>(); }},
    {"GetScrollMaxY", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetScrollMaxYParams>(); }},
    {"SetScrollHereX", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetScrollHereXParams>(); }},
    {"SetScrollHereY", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetScrollHereYParams>(); }},
    {"SetScrollFromPosX", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetScrollFromPosXParams>(); }},
    {"SetScrollFromPosY", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetScrollFromPosYParams>(); }},
    {"PushFont", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<PushFontParams>(); }},
    {"PopFont", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<PopFontParams>(); }},
    {"GetFont", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetFontParams>(); }},
    {"GetFontSize", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetFontSizeParams>(); }},
    {"GetFontBaked", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetFontBakedParams>(); }},
    {"PushStyleColor", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<PushStyleColorParams>(); }},
    {"PushStyleColor", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<PushStyleColorParams>(); }},
    {"PopStyleColor", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<PopStyleColorParams>(); }},
    {"PushStyleVar", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<PushStyleVarParams>(); }},
    {"PushStyleVar", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<PushStyleVarParams>(); }},
    {"PushStyleVarX", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<PushStyleVarXParams>(); }},
    {"PushStyleVarY", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<PushStyleVarYParams>(); }},
    {"PopStyleVar", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<PopStyleVarParams>(); }},
    {"PushItemFlag", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<PushItemFlagParams>(); }},
    {"PopItemFlag", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<PopItemFlagParams>(); }},
    {"PushItemWidth", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<PushItemWidthParams>(); }},
    {"PopItemWidth", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<PopItemWidthParams>(); }},
    {"SetNextItemWidth", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetNextItemWidthParams>(); }},
    {"CalcItemWidth", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<CalcItemWidthParams>(); }},
    {"PushTextWrapPos", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<PushTextWrapPosParams>(); }},
    {"PopTextWrapPos", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<PopTextWrapPosParams>(); }},
    {"GetFontTexUvWhitePixel", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetFontTexUvWhitePixelParams>(); }},
    {"GetColorU32", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetColorU32Params>(); }},
    {"GetColorU32", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetColorU32Params>(); }},
    {"GetColorU32", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetColorU32Params>(); }},
    {"GetCursorScreenPos", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetCursorScreenPosParams>(); }},
    {"SetCursorScreenPos", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetCursorScreenPosParams>(); }},
    {"GetContentRegionAvail", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetContentRegionAvailParams>(); }},
    {"GetCursorPos", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetCursorPosParams>(); }},
    {"GetCursorPosX", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetCursorPosXParams>(); }},
    {"GetCursorPosY", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetCursorPosYParams>(); }},
    {"SetCursorPos", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetCursorPosParams>(); }},
    {"SetCursorPosX", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetCursorPosXParams>(); }},
    {"SetCursorPosY", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetCursorPosYParams>(); }},
    {"GetCursorStartPos", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetCursorStartPosParams>(); }},
    {"Separator", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SeparatorParams>(); }},
    {"SameLine", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SameLineParams>(); }},
    {"NewLine", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<NewLineParams>(); }},
    {"Spacing", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SpacingParams>(); }},
    {"Dummy", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<DummyParams>(); }},
    {"Indent", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IndentParams>(); }},
    {"Unindent", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<UnindentParams>(); }},
    {"BeginGroup", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<BeginGroupParams>(); }},
    {"EndGroup", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<EndGroupParams>(); }},
    {"AlignTextToFramePadding", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<AlignTextToFramePaddingParams>(); }},
    {"GetTextLineHeight", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetTextLineHeightParams>(); }},
    {"GetTextLineHeightWithSpacing", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetTextLineHeightWithSpacingParams>(); }},
    {"GetFrameHeight", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetFrameHeightParams>(); }},
    {"GetFrameHeightWithSpacing", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetFrameHeightWithSpacingParams>(); }},
    {"PushID", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<PushIDParams>(); }},
    {"PushID", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<PushIDParams>(); }},
    {"PushID", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<PushIDParams>(); }},
    {"PushID", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<PushIDParams>(); }},
    {"PopID", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<PopIDParams>(); }},
    {"GetID", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetIDParams>(); }},
    {"GetID", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetIDParams>(); }},
    {"GetID", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetIDParams>(); }},
    {"GetID", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetIDParams>(); }},
    {"TextUnformatted", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<TextUnformattedParams>(); }},
    {"SeparatorText", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SeparatorTextParams>(); }},
    {"SmallButton", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SmallButtonParams>(); }},
    {"InvisibleButton", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<InvisibleButtonParams>(); }},
    {"ArrowButton", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ArrowButtonParams>(); }},
    {"Checkbox", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<CheckboxParams>(); }},
    {"CheckboxFlags", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<CheckboxFlagsParams>(); }},
    {"CheckboxFlags", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<CheckboxFlagsParams>(); }},
    {"RadioButton", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<RadioButtonParams>(); }},
    {"RadioButton", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<RadioButtonParams>(); }},
    {"Bullet", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<BulletParams>(); }},
    {"TextLink", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<TextLinkParams>(); }},
    {"TextLinkOpenURL", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<TextLinkOpenURLParams>(); }},
    {"BeginCombo", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<BeginComboParams>(); }},
    {"EndCombo", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<EndComboParams>(); }},
    {"Combo", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ComboParams>(); }},
    {"Combo", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ComboParams>(); }},
    {"DragFloat", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<DragFloatParams>(); }},
    {"DragFloat2", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<DragFloat2Params>(); }},
    {"DragFloat3", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<DragFloat3Params>(); }},
    {"DragFloat4", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<DragFloat4Params>(); }},
    {"DragFloatRange2", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<DragFloatRange2Params>(); }},
    {"DragInt", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<DragIntParams>(); }},
    {"DragInt2", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<DragInt2Params>(); }},
    {"DragInt3", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<DragInt3Params>(); }},
    {"DragInt4", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<DragInt4Params>(); }},
    {"DragIntRange2", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<DragIntRange2Params>(); }},
    {"DragScalar", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<DragScalarParams>(); }},
    {"DragScalarN", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<DragScalarNParams>(); }},
    {"SliderFloat", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SliderFloatParams>(); }},
    {"SliderFloat2", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SliderFloat2Params>(); }},
    {"SliderFloat3", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SliderFloat3Params>(); }},
    {"SliderFloat4", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SliderFloat4Params>(); }},
    {"SliderAngle", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SliderAngleParams>(); }},
    {"SliderInt", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SliderIntParams>(); }},
    {"SliderInt2", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SliderInt2Params>(); }},
    {"SliderInt3", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SliderInt3Params>(); }},
    {"SliderInt4", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SliderInt4Params>(); }},
    {"SliderScalar", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SliderScalarParams>(); }},
    {"SliderScalarN", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SliderScalarNParams>(); }},
    {"VSliderFloat", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<VSliderFloatParams>(); }},
    {"VSliderInt", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<VSliderIntParams>(); }},
    {"VSliderScalar", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<VSliderScalarParams>(); }},
    {"InputText", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<InputTextParams>(); }},
    {"InputTextWithHint", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<InputTextWithHintParams>(); }},
    {"InputFloat", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<InputFloatParams>(); }},
    {"InputFloat2", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<InputFloat2Params>(); }},
    {"InputFloat3", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<InputFloat3Params>(); }},
    {"InputFloat4", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<InputFloat4Params>(); }},
    {"InputInt", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<InputIntParams>(); }},
    {"InputInt2", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<InputInt2Params>(); }},
    {"InputInt3", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<InputInt3Params>(); }},
    {"InputInt4", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<InputInt4Params>(); }},
    {"InputDouble", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<InputDoubleParams>(); }},
    {"InputScalar", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<InputScalarParams>(); }},
    {"InputScalarN", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<InputScalarNParams>(); }},
    {"ColorEdit3", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ColorEdit3Params>(); }},
    {"ColorEdit4", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ColorEdit4Params>(); }},
    {"ColorPicker3", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ColorPicker3Params>(); }},
    {"ColorPicker4", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ColorPicker4Params>(); }},
    {"SetColorEditOptions", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetColorEditOptionsParams>(); }},
    {"TreeNode", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<TreeNodeParams>(); }},
    {"TreeNodeEx", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<TreeNodeExParams>(); }},
    {"TreePush", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<TreePushParams>(); }},
    {"TreePush", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<TreePushParams>(); }},
    {"TreePop", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<TreePopParams>(); }},
    {"GetTreeNodeToLabelSpacing", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetTreeNodeToLabelSpacingParams>(); }},
    {"CollapsingHeader", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<CollapsingHeaderParams>(); }},
    {"CollapsingHeader", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<CollapsingHeaderParams>(); }},
    {"SetNextItemOpen", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetNextItemOpenParams>(); }},
    {"SetNextItemStorageID", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetNextItemStorageIDParams>(); }},
    {"BeginMultiSelect", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<BeginMultiSelectParams>(); }},
    {"EndMultiSelect", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<EndMultiSelectParams>(); }},
    {"SetNextItemSelectionUserData", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetNextItemSelectionUserDataParams>(); }},
    {"IsItemToggledSelection", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsItemToggledSelectionParams>(); }},
    {"EndListBox", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<EndListBoxParams>(); }},
    {"ListBox", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ListBoxParams>(); }},
    {"Value", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ValueParams>(); }},
    {"Value", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ValueParams>(); }},
    {"Value", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ValueParams>(); }},
    {"Value", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ValueParams>(); }},
    {"BeginMenuBar", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<BeginMenuBarParams>(); }},
    {"EndMenuBar", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<EndMenuBarParams>(); }},
    {"BeginMainMenuBar", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<BeginMainMenuBarParams>(); }},
    {"EndMainMenuBar", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<EndMainMenuBarParams>(); }},
    {"BeginMenu", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<BeginMenuParams>(); }},
    {"EndMenu", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<EndMenuParams>(); }},
    {"MenuItem", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<MenuItemParams>(); }},
    {"MenuItem", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<MenuItemParams>(); }},
    {"BeginTooltip", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<BeginTooltipParams>(); }},
    {"EndTooltip", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<EndTooltipParams>(); }},
    {"BeginItemTooltip", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<BeginItemTooltipParams>(); }},
    {"BeginPopup", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<BeginPopupParams>(); }},
    {"BeginPopupModal", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<BeginPopupModalParams>(); }},
    {"EndPopup", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<EndPopupParams>(); }},
    {"OpenPopup", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<OpenPopupParams>(); }},
    {"OpenPopup", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<OpenPopupParams>(); }},
    {"OpenPopupOnItemClick", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<OpenPopupOnItemClickParams>(); }},
    {"CloseCurrentPopup", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<CloseCurrentPopupParams>(); }},
    {"BeginPopupContextItem", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<BeginPopupContextItemParams>(); }},
    {"BeginPopupContextWindow", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<BeginPopupContextWindowParams>(); }},
    {"BeginPopupContextVoid", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<BeginPopupContextVoidParams>(); }},
    {"IsPopupOpen", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsPopupOpenParams>(); }},
    {"EndTable", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<EndTableParams>(); }},
    {"TableNextRow", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<TableNextRowParams>(); }},
    {"TableNextColumn", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<TableNextColumnParams>(); }},
    {"TableSetColumnIndex", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<TableSetColumnIndexParams>(); }},
    {"TableSetupColumn", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<TableSetupColumnParams>(); }},
    {"TableSetupScrollFreeze", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<TableSetupScrollFreezeParams>(); }},
    {"TableHeader", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<TableHeaderParams>(); }},
    {"TableHeadersRow", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<TableHeadersRowParams>(); }},
    {"TableAngledHeadersRow", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<TableAngledHeadersRowParams>(); }},
    {"TableGetSortSpecs", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<TableGetSortSpecsParams>(); }},
    {"TableGetColumnCount", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<TableGetColumnCountParams>(); }},
    {"TableGetColumnIndex", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<TableGetColumnIndexParams>(); }},
    {"TableGetRowIndex", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<TableGetRowIndexParams>(); }},
    {"TableGetColumnFlags", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<TableGetColumnFlagsParams>(); }},
    {"TableSetColumnEnabled", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<TableSetColumnEnabledParams>(); }},
    {"TableGetHoveredColumn", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<TableGetHoveredColumnParams>(); }},
    {"TableSetBgColor", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<TableSetBgColorParams>(); }},
    {"Columns", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ColumnsParams>(); }},
    {"NextColumn", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<NextColumnParams>(); }},
    {"GetColumnIndex", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetColumnIndexParams>(); }},
    {"GetColumnWidth", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetColumnWidthParams>(); }},
    {"SetColumnWidth", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetColumnWidthParams>(); }},
    {"GetColumnOffset", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetColumnOffsetParams>(); }},
    {"SetColumnOffset", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetColumnOffsetParams>(); }},
    {"GetColumnsCount", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetColumnsCountParams>(); }},
    {"BeginTabBar", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<BeginTabBarParams>(); }},
    {"EndTabBar", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<EndTabBarParams>(); }},
    {"BeginTabItem", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<BeginTabItemParams>(); }},
    {"EndTabItem", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<EndTabItemParams>(); }},
    {"TabItemButton", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<TabItemButtonParams>(); }},
    {"SetTabItemClosed", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetTabItemClosedParams>(); }},
    {"DockSpaceOverViewport", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<DockSpaceOverViewportParams>(); }},
    {"SetNextWindowDockID", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetNextWindowDockIDParams>(); }},
    {"SetNextWindowClass", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetNextWindowClassParams>(); }},
    {"GetWindowDockID", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetWindowDockIDParams>(); }},
    {"IsWindowDocked", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsWindowDockedParams>(); }},
    {"LogToTTY", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<LogToTTYParams>(); }},
    {"LogToFile", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<LogToFileParams>(); }},
    {"LogToClipboard", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<LogToClipboardParams>(); }},
    {"LogFinish", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<LogFinishParams>(); }},
    {"LogButtons", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<LogButtonsParams>(); }},
    {"BeginDragDropSource", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<BeginDragDropSourceParams>(); }},
    {"SetDragDropPayload", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetDragDropPayloadParams>(); }},
    {"EndDragDropSource", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<EndDragDropSourceParams>(); }},
    {"BeginDragDropTarget", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<BeginDragDropTargetParams>(); }},
    {"EndDragDropTarget", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<EndDragDropTargetParams>(); }},
    {"BeginDisabled", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<BeginDisabledParams>(); }},
    {"EndDisabled", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<EndDisabledParams>(); }},
    {"PushClipRect", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<PushClipRectParams>(); }},
    {"PopClipRect", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<PopClipRectParams>(); }},
    {"SetItemDefaultFocus", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetItemDefaultFocusParams>(); }},
    {"SetKeyboardFocusHere", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetKeyboardFocusHereParams>(); }},
    {"SetNavCursorVisible", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetNavCursorVisibleParams>(); }},
    {"SetNextItemAllowOverlap", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetNextItemAllowOverlapParams>(); }},
    {"IsItemHovered", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsItemHoveredParams>(); }},
    {"IsItemActive", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsItemActiveParams>(); }},
    {"IsItemFocused", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsItemFocusedParams>(); }},
    {"IsItemClicked", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsItemClickedParams>(); }},
    {"IsItemVisible", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsItemVisibleParams>(); }},
    {"IsItemEdited", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsItemEditedParams>(); }},
    {"IsItemActivated", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsItemActivatedParams>(); }},
    {"IsItemDeactivated", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsItemDeactivatedParams>(); }},
    {"IsItemDeactivatedAfterEdit", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsItemDeactivatedAfterEditParams>(); }},
    {"IsItemToggledOpen", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsItemToggledOpenParams>(); }},
    {"IsAnyItemHovered", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsAnyItemHoveredParams>(); }},
    {"IsAnyItemActive", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsAnyItemActiveParams>(); }},
    {"IsAnyItemFocused", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsAnyItemFocusedParams>(); }},
    {"GetItemID", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetItemIDParams>(); }},
    {"GetItemRectMin", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetItemRectMinParams>(); }},
    {"GetItemRectMax", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetItemRectMaxParams>(); }},
    {"GetItemRectSize", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetItemRectSizeParams>(); }},
    {"GetMainViewport", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetMainViewportParams>(); }},
    {"GetBackgroundDrawList", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetBackgroundDrawListParams>(); }},
    {"GetForegroundDrawList", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetForegroundDrawListParams>(); }},
    {"IsRectVisible", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsRectVisibleParams>(); }},
    {"IsRectVisible", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsRectVisibleParams>(); }},
    {"GetTime", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetTimeParams>(); }},
    {"GetFrameCount", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetFrameCountParams>(); }},
    {"GetDrawListSharedData", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetDrawListSharedDataParams>(); }},
    {"SetStateStorage", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetStateStorageParams>(); }},
    {"GetStateStorage", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetStateStorageParams>(); }},
    {"CalcTextSize", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<CalcTextSizeParams>(); }},
    {"ColorConvertU32ToFloat4", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ColorConvertU32ToFloat4Params>(); }},
    {"ColorConvertFloat4ToU32", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ColorConvertFloat4ToU32Params>(); }},
    {"ColorConvertRGBtoHSV", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ColorConvertRGBtoHSVParams>(); }},
    {"ColorConvertHSVtoRGB", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ColorConvertHSVtoRGBParams>(); }},
    {"IsKeyDown", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsKeyDownParams>(); }},
    {"IsKeyPressed", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsKeyPressedParams>(); }},
    {"IsKeyReleased", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsKeyReleasedParams>(); }},
    {"IsKeyChordPressed", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsKeyChordPressedParams>(); }},
    {"GetKeyPressedAmount", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetKeyPressedAmountParams>(); }},
    {"SetNextFrameWantCaptureKeyboard", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetNextFrameWantCaptureKeyboardParams>(); }},
    {"Shortcut", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ShortcutParams>(); }},
    {"SetNextItemShortcut", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetNextItemShortcutParams>(); }},
    {"SetItemKeyOwner", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetItemKeyOwnerParams>(); }},
    {"IsMouseDown", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsMouseDownParams>(); }},
    {"IsMouseClicked", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsMouseClickedParams>(); }},
    {"IsMouseReleased", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsMouseReleasedParams>(); }},
    {"IsMouseDoubleClicked", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsMouseDoubleClickedParams>(); }},
    {"IsMouseReleasedWithDelay", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsMouseReleasedWithDelayParams>(); }},
    {"GetMouseClickedCount", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetMouseClickedCountParams>(); }},
    {"IsMouseHoveringRect", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsMouseHoveringRectParams>(); }},
    {"IsMousePosValid", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsMousePosValidParams>(); }},
    {"IsAnyMouseDown", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsAnyMouseDownParams>(); }},
    {"GetMousePos", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetMousePosParams>(); }},
    {"GetMousePosOnOpeningCurrentPopup", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetMousePosOnOpeningCurrentPopupParams>(); }},
    {"IsMouseDragging", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<IsMouseDraggingParams>(); }},
    {"GetMouseDragDelta", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetMouseDragDeltaParams>(); }},
    {"ResetMouseDragDelta", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<ResetMouseDragDeltaParams>(); }},
    {"GetMouseCursor", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetMouseCursorParams>(); }},
    {"SetMouseCursor", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetMouseCursorParams>(); }},
    {"SetNextFrameWantCaptureMouse", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetNextFrameWantCaptureMouseParams>(); }},
    {"SetClipboardText", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetClipboardTextParams>(); }},
    {"LoadIniSettingsFromDisk", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<LoadIniSettingsFromDiskParams>(); }},
    {"LoadIniSettingsFromMemory", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<LoadIniSettingsFromMemoryParams>(); }},
    {"SaveIniSettingsToDisk", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SaveIniSettingsToDiskParams>(); }},
    {"DebugTextEncoding", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<DebugTextEncodingParams>(); }},
    {"DebugFlashStyleColor", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<DebugFlashStyleColorParams>(); }},
    {"DebugStartItemPicker", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<DebugStartItemPickerParams>(); }},
    {"DebugCheckVersionAndDataLayout", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<DebugCheckVersionAndDataLayoutParams>(); }},
    {"SetAllocatorFunctions", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<SetAllocatorFunctionsParams>(); }},
    {"GetAllocatorFunctions", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<GetAllocatorFunctionsParams>(); }},
    {"MemAlloc", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<MemAllocParams>(); }},
    {"MemFree", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<MemFreeParams>(); }},
    {"UpdatePlatformWindows", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<UpdatePlatformWindowsParams>(); }},
    {"RenderPlatformWindowsDefault", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<RenderPlatformWindowsDefaultParams>(); }},
    {"DestroyPlatformWindows", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<DestroyPlatformWindowsParams>(); }},
    {"FindViewportByID", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<FindViewportByIDParams>(); }},
    {"FindViewportByPlatformHandle", []() -> std::unique_ptr<IParameterParamsBase> { return std::make_unique<FindViewportByPlatformHandleParams>(); }},
};
} // namespace core
